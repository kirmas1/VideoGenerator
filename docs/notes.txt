
How to create the video ?

The input will be:
1. Images
2. Texts to be written above images. 

Output:
Slideshow video from the input images, and text that will be typed on those images.


Proccess:
1. Create video from each images and text. a video that show the image and the text typed on it.

1.1 In order to acheive that we will display the image in the browser, and upon it will type the text using typed.js.
1.2 Record the screen using screen-capture-recorder and ffmpeg. (need to configure capturing only the relevant part of the screen) 
2. Once set of videos from step 1 are ready, combine them into one video using ffmpeg.
3. Video is ready.


Documentation:

https://github.com/rdp/screen-capture-recorder-to-video-windows-free

https://ffmpeg.org/ffmpeg.html

https://github.com/mattboldt/typed.js/


typed.js investigation:

typeSpeed: 100
Measured:
50 chars ~ 7.5 seconds
1 char ~ 7.5/50 sec = 0.15 seconds.

From code: 0.1 - 0.17 seconds.

The code calc is: Math.round(Math.random() * (100 - 30)) + this.typeSpeed;

////////////////////////////////////////////////////////////////////////////////////////////

1/4/2017 - Big change
---------------------

The client sends to server this: 

formData that includes: 
1. list of files
2. Data (json)

************* About the Data *************
{
	videoName: 'video name',
        slidesInfo: []
}

slidesInfo is an array ordered as the slides should be. like, Slide1 - Transition1 - Slide2 - Transition2 - Slide3..
Each element in the array is Object including those fields:

For Image info Object:
----------------------

{
	type: 0,
	fileName: 'fileName',
	caption: {
		   text: 'text',
		   font: 'fontName',
		   fontsize: size(Number),
		   bold: boolean,
		   italic: boolean,
		   effect: 'EffectName,
		   startTime: startTime(Number),
		   duration: duration(Number)
		 }
	zoom: {
		enabled: boolean,
		style: 0-zoom to center OR 1-zoom to random place near center
	      }
	duration: duration(Number)
}

For Transition info Object:
---------------------------

{
	type: 1,
	duration: duration(Number),
	effect: {
		 type: 'type', //-1 = None, 0 = blend, 1 = uncover
		uncover: 0-left, 1-right, 2-down
		}
}

///////////////////////////////////////////////////////////////////////////////////////////

























 
